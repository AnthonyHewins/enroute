interface{}(
   spec.Swagger{},
   &loads.Document{
       Analyzer: &analysis.Spec{
           spec: &spec.Swagger{
               SwaggerProps: spec.SwaggerProps{
                   Info: &spec.Info{
                       InfoProps: spec.InfoProps{
                           Title:   "Swagger Petstore",
                           License: &spec.License{LicenseProps: spec.LicenseProps{Name: "MIT"}},
                           Version: "1.0.0",
                       },
                   },
                   Paths: &spec.Paths{
                       Paths: map[string]spec.PathItem{
                           "/pets": {
                               PathItemProps: spec.PathItemProps{
                                   Get: &spec.Operation{
                                       OperationProps: spec.OperationProps{
                                           Tags:    []string{"pets"},
                                           Summary: "List all pets",
                                           ID:      "listPets",
                                           Parameters: []spec.Parameter{
                                               {
                                                   ParamProps: spec.ParamProps{
                                                       Description: "How many items to return at one time (max 100)",
                                                       Name:        "limit",
                                                       In:          "query",
                                                       Schema: &spec.Schema{
                                                           SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"integer"}, Format: "int32"},
                                                       },
                                                   },
                                               },
                                           },
                                           Responses: &spec.Responses{
                                               ResponsesProps: spec.ResponsesProps{
                                                   Default: &spec.Response{ResponseProps: spec.ResponseProps{Description: "unexpected error"}},
                                                   StatusCodeResponses: map[int]spec.Response{
                                                       200: {
                                                           ResponseProps: spec.ResponseProps{
                                                               Description: "A paged array of pets",
                                                               Headers: map[string]spec.Header{
                                                                   "x-next": {
                                                                       HeaderProps: spec.HeaderProps{Description: "A link to the next page of responses"},
                                                                   },
                                                               },
                                                           },
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                                   Post: &spec.Operation{
                                       OperationProps: spec.OperationProps{
                                           Tags:    []string{"pets"},
                                           Summary: "Create a pet",
                                           ID:      "createPets",
                                           Responses: &spec.Responses{
                                               ResponsesProps: spec.ResponsesProps{
                                                   Default:             &spec.Response{ResponseProps: spec.ResponseProps{Description: "unexpected error"}},
                                                   StatusCodeResponses: map[int]spec.Response{201: {ResponseProps: spec.ResponseProps{Description: "Null response"}}},
                                               },
                                           },
                                       },
                                   },
                               },
                           },
                           "/pets/{petId}": {
                               PathItemProps: spec.PathItemProps{
                                   Get: &spec.Operation{
                                       OperationProps: spec.OperationProps{
                                           Tags:    []string{"pets"},
                                           Summary: "Info for a specific pet",
                                           ID:      "showPetById",
                                           Parameters: []spec.Parameter{
                                               {
                                                   ParamProps: spec.ParamProps{
                                                       Description: "The id of the pet to retrieve",
                                                       Name:        "petId",
                                                       In:          "path",
                                                       Required:    true,
                                                       Schema:      &spec.Schema{SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                                                   },
                                               },
                                           },
                                           Responses: &spec.Responses{
                                               ResponsesProps: spec.ResponsesProps{
                                                   Default: &spec.Response{ResponseProps: spec.ResponseProps{Description: "unexpected error"}},
                                                   StatusCodeResponses: map[int]spec.Response{
                                                       200: {
                                                           ResponseProps: spec.ResponseProps{Description: "Expected response to a valid request"},
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
               },
           },
           consumes:    map[string]struct{}{},
           produces:    map[string]struct{}{},
           authSchemes: map[string]struct{}{},
           operations: map[string]map[string]*spec.Operation{
               "GET":  {"/pets": ⟪0xc0002362a0⟫, "/pets/{petId}": ⟪0xc000236460⟫},
               "POST": {"/pets": ⟪0xc000236380⟫},
           },
           references: analysis.referenceAnalysis{
               schemas:        map[string]spec.Ref{},
               responses:      map[string]spec.Ref{},
               parameters:     map[string]spec.Ref{},
               items:          map[string]spec.Ref{},
               headerItems:    map[string]spec.Ref{},
               parameterItems: map[string]spec.Ref{},
               allRefs:        map[string]spec.Ref{},
               pathItems:      map[string]spec.Ref{},
           },
           patterns: analysis.patternAnalysis{
               parameters:  map[string]string{},
               headers:     map[string]string{},
               items:       map[string]string{},
               schemas:     map[string]string{},
               allPatterns: map[string]string{},
           },
           enums: analysis.enumAnalysis{
               parameters: map[string][]interface{}{},
               headers:    map[string][]interface{}{},
               items:      map[string][]interface{}{},
               schemas:    map[string][]interface{}{},
               allEnums:   map[string][]interface{}{},
           },
           allSchemas: map[string]analysis.SchemaRef{},
           allOfs:     map[string]analysis.SchemaRef{},
       },
       spec: ⟪0xc0000b6800⟫,
       origSpec: &spec.Swagger{
           SwaggerProps: spec.SwaggerProps{
               Info: &spec.Info{
                   InfoProps: spec.InfoProps{
                       Title:   "Swagger Petstore",
                       License: &spec.License{LicenseProps: spec.LicenseProps{Name: "MIT"}},
                       Version: "1.0.0",
                   },
               },
               Paths: &spec.Paths{
                   Paths: map[string]spec.PathItem{
                       "/pets": {
                           PathItemProps: spec.PathItemProps{
                               Get: &spec.Operation{
                                   OperationProps: spec.OperationProps{
                                       Tags:    []string{"pets"},
                                       Summary: "List all pets",
                                       ID:      "listPets",
                                       Parameters: []spec.Parameter{
                                           {
                                               ParamProps: spec.ParamProps{
                                                   Description: "How many items to return at one time (max 100)",
                                                   Name:        "limit",
                                                   In:          "query",
                                                   Schema: &spec.Schema{
                                                       SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"integer"}, Format: "int32"},
                                                   },
                                               },
                                           },
                                       },
                                       Responses: &spec.Responses{
                                           ResponsesProps: spec.ResponsesProps{
                                               Default: &spec.Response{ResponseProps: spec.ResponseProps{Description: "unexpected error"}},
                                               StatusCodeResponses: map[int]spec.Response{
                                                   200: {
                                                       ResponseProps: spec.ResponseProps{
                                                           Description: "A paged array of pets",
                                                           Headers: map[string]spec.Header{
                                                               "x-next": {
                                                                   HeaderProps: spec.HeaderProps{Description: "A link to the next page of responses"},
                                                               },
                                                           },
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                               Post: &spec.Operation{
                                   OperationProps: spec.OperationProps{
                                       Tags:    []string{"pets"},
                                       Summary: "Create a pet",
                                       ID:      "createPets",
                                       Responses: &spec.Responses{
                                           ResponsesProps: spec.ResponsesProps{
                                               Default:             &spec.Response{ResponseProps: spec.ResponseProps{Description: "unexpected error"}},
                                               StatusCodeResponses: map[int]spec.Response{201: {ResponseProps: spec.ResponseProps{Description: "Null response"}}},
                                           },
                                       },
                                   },
                               },
                           },
                       },
                       "/pets/{petId}": {
                           PathItemProps: spec.PathItemProps{
                               Get: &spec.Operation{
                                   OperationProps: spec.OperationProps{
                                       Tags:    []string{"pets"},
                                       Summary: "Info for a specific pet",
                                       ID:      "showPetById",
                                       Parameters: []spec.Parameter{
                                           {
                                               ParamProps: spec.ParamProps{
                                                   Description: "The id of the pet to retrieve",
                                                   Name:        "petId",
                                                   In:          "path",
                                                   Required:    true,
                                                   Schema:      &spec.Schema{SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                                               },
                                           },
                                       },
                                       Responses: &spec.Responses{
                                           ResponsesProps: spec.ResponsesProps{
                                               Default: &spec.Response{ResponseProps: spec.ResponseProps{Description: "unexpected error"}},
                                               StatusCodeResponses: map[int]spec.Response{
                                                   200: {
                                                       ResponseProps: spec.ResponseProps{Description: "Expected response to a valid request"},
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
               },
           },
       },
       schema: &spec.Schema{
           SchemaProps: spec.SchemaProps{
               ID:       "http://swagger.io/v2/schema.json#",
               Schema:   "http://json-schema.org/draft-04/schema",
               Type:     spec.StringOrArray{"object"},
               Title:    "A JSON Schema for Swagger 2.0 API.",
               Required: []string{"swagger", "info", "paths"},
               Properties: map[string]spec.Schema{
                   "basePath": {
                       SchemaProps: spec.SchemaProps{
                           Description: "The base path to the API. Example: '/api'.",
                           Type:        spec.StringOrArray{"string"},
                           Pattern:     "^/",
                       },
                   },
                   "consumes": {
                       SchemaProps: spec.SchemaProps{
                           Description: "A list of MIME types accepted by the API.",
                           AllOf: []spec.Schema{
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/mediaTypeList"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "mediaTypeList"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "definitions": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/definitions"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "definitions"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "externalDocs": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/externalDocs"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "externalDocs"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "host": {
                       SchemaProps: spec.SchemaProps{
                           Description: "The host (name or ip) of the API. Example: 'swagger.io'",
                           Type:        spec.StringOrArray{"string"},
                           Pattern:     `^[^{}/ :\\]+(?::\d+)?$`,
                       },
                   },
                   "info": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/info"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "info"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "parameters": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/parameterDefinitions"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "parameterDefinitions"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "paths": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/paths"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "paths"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "produces": {
                       SchemaProps: spec.SchemaProps{
                           Description: "A list of MIME types the API can produce.",
                           AllOf: []spec.Schema{
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/mediaTypeList"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "mediaTypeList"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "responses": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/responseDefinitions"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "responseDefinitions"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "schemes": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/schemesList"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schemesList"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "security": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/security"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "security"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "securityDefinitions": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/securityDefinitions"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "securityDefinitions"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
                   "swagger": {
                       SchemaProps: spec.SchemaProps{
                           Description: "The Swagger version of this document.",
                           Type:        spec.StringOrArray{"string"},
                           Enum:        []interface{}{string("2.0")},
                       },
                   },
                   "tags": {
                       SchemaProps: spec.SchemaProps{
                           Type:        spec.StringOrArray{"array"},
                           UniqueItems: true,
                           Items: &spec.SchemaOrArray{
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/tag"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "tag"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
               },
               AdditionalProperties: &spec.SchemaOrBool{},
               PatternProperties: map[string]spec.Schema{
                   "^x-": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                   HasFragmentOnly:  true,
                               },
                           },
                       },
                   },
               },
               Definitions: spec.Definitions{
                   "apiKeySecurity": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"type", "name", "in"},
                           Properties: map[string]spec.Schema{
                               "description": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "in": {
                                   SchemaProps: spec.SchemaProps{
                                       Type: spec.StringOrArray{"string"},
                                       Enum: []interface{}{string("header"), string("query")},
                                   },
                               },
                               "name": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "type": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("apiKey")}},
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "basicAuthenticationSecurity": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"type"},
                           Properties: map[string]spec.Schema{
                               "description": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "type": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("basic")}},
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "bodyParameter": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"name", "in", "schema"},
                           Properties: map[string]spec.Schema{
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "in": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines the location of the parameter.",
                                       Type:        spec.StringOrArray{"string"},
                                       Enum:        []interface{}{string("body")},
                                   },
                               },
                               "name": {
                                   SchemaProps: spec.SchemaProps{Description: "The name of the parameter.", Type: spec.StringOrArray{"string"}},
                               },
                               "required": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines whether or not this parameter is required or optional.",
                                       Type:        spec.StringOrArray{"boolean"},
                                       Default:     bool(false),
                                   },
                               },
                               "schema": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/schema"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schema"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "collectionFormat": {
                       SchemaProps: spec.SchemaProps{
                           Type:    spec.StringOrArray{"string"},
                           Default: string("csv"),
                           Enum:    []interface{}{string("csv"), string("ssv"), string("tsv"), string("pipes")},
                       },
                   },
                   "collectionFormatWithMulti": {
                       SchemaProps: spec.SchemaProps{
                           Type:    spec.StringOrArray{"string"},
                           Default: string("csv"),
                           Enum:    []interface{}{string("csv"), string("ssv"), string("tsv"), string("pipes"), string("multi")},
                       },
                   },
                   "contact": {
                       SchemaProps: spec.SchemaProps{
                           Description: "Contact information for the owners of the API.",
                           Type:        spec.StringOrArray{"object"},
                           Properties: map[string]spec.Schema{
                               "email": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "The email address of the contact person/organization.",
                                       Type:        spec.StringOrArray{"string"},
                                       Format:      "email",
                                   },
                               },
                               "name": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "The identifying name of the contact person/organization.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "url": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "The URL pointing to the contact information.",
                                       Type:        spec.StringOrArray{"string"},
                                       Format:      "uri",
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "default": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/default",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "default"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "definitions": {
                       SchemaProps: spec.SchemaProps{
                           Description: "One or more JSON objects describing the schemas being consumed and produced by the API.",
                           Type:        spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{
                               Allows: true,
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/schema"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schema"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "description": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/description",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "description"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "enum": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/enum",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "enum"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "examples": {
                       SchemaProps: spec.SchemaProps{
                           Type:                 spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{Allows: true},
                       },
                   },
                   "exclusiveMaximum": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/exclusiveMaximum",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "exclusiveMaximum"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "exclusiveMinimum": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/exclusiveMinimum",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "exclusiveMinimum"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "externalDocs": {
                       SchemaProps: spec.SchemaProps{
                           Description: "information about external documentation",
                           Type:        spec.StringOrArray{"object"},
                           Required:    []string{"url"},
                           Properties: map[string]spec.Schema{
                               "description": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "url":         {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Format: "uri"}},
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "fileSchema": {
                       SchemaProps: spec.SchemaProps{
                           Description: "A deterministic version of a JSON Schema object.",
                           Type:        spec.StringOrArray{"object"},
                           Required:    []string{"type"},
                           Properties: map[string]spec.Schema{
                               "default": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/default",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "default"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/description",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "description"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "example": {},
                               "externalDocs": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/externalDocs"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "externalDocs"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "format": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "readOnly": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"boolean"}, Default: bool(false)},
                               },
                               "required": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/definitions/stringArray",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "stringArray"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "title": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/title",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "title"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("file")}},
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "formDataParameterSubSchema": {
                       SchemaProps: spec.SchemaProps{
                           Properties: map[string]spec.Schema{
                               "allowEmptyValue": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "allows sending a parameter by name only or with an empty value.",
                                       Type:        spec.StringOrArray{"boolean"},
                                       Default:     bool(false),
                                   },
                               },
                               "collectionFormat": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/collectionFormatWithMulti"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "collectionFormatWithMulti"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "default": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/default"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "default"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "enum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/enum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "enum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMaximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMaximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMaximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMinimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMinimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMinimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "format": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "in": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines the location of the parameter.",
                                       Type:        spec.StringOrArray{"string"},
                                       Enum:        []interface{}{string("formData")},
                                   },
                               },
                               "items": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/primitivesItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "primitivesItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "multipleOf": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/multipleOf"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "multipleOf"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "name": {
                                   SchemaProps: spec.SchemaProps{Description: "The name of the parameter.", Type: spec.StringOrArray{"string"}},
                               },
                               "pattern": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/pattern"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "pattern"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "required": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines whether or not this parameter is required or optional.",
                                       Type:        spec.StringOrArray{"boolean"},
                                       Default:     bool(false),
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{
                                       Type: spec.StringOrArray{"string"},
                                       Enum: []interface{}{
                                           string("string"),
                                           string("number"),
                                           string("boolean"),
                                           string("integer"),
                                           string("array"),
                                           string("file"),
                                       },
                                   },
                               },
                               "uniqueItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/uniqueItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "uniqueItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "header": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"type"},
                           Properties: map[string]spec.Schema{
                               "collectionFormat": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/collectionFormat"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "collectionFormat"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "default": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/default"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "default"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "description": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "enum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/enum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "enum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMaximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMaximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMaximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMinimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMinimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMinimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "format": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "items": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/primitivesItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "primitivesItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "multipleOf": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/multipleOf"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "multipleOf"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "pattern": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/pattern"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "pattern"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{
                                       Type: spec.StringOrArray{"string"},
                                       Enum: []interface{}{
                                           string("string"),
                                           string("number"),
                                           string("integer"),
                                           string("boolean"),
                                           string("array"),
                                       },
                                   },
                               },
                               "uniqueItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/uniqueItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "uniqueItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "headerParameterSubSchema": {
                       SchemaProps: spec.SchemaProps{
                           Properties: map[string]spec.Schema{
                               "collectionFormat": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/collectionFormat"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "collectionFormat"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "default": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/default"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "default"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "enum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/enum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "enum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMaximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMaximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMaximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMinimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMinimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMinimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "format": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "in": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines the location of the parameter.",
                                       Type:        spec.StringOrArray{"string"},
                                       Enum:        []interface{}{string("header")},
                                   },
                               },
                               "items": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/primitivesItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "primitivesItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "multipleOf": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/multipleOf"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "multipleOf"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "name": {
                                   SchemaProps: spec.SchemaProps{Description: "The name of the parameter.", Type: spec.StringOrArray{"string"}},
                               },
                               "pattern": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/pattern"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "pattern"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "required": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines whether or not this parameter is required or optional.",
                                       Type:        spec.StringOrArray{"boolean"},
                                       Default:     bool(false),
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{
                                       Type: spec.StringOrArray{"string"},
                                       Enum: []interface{}{
                                           string("string"),
                                           string("number"),
                                           string("boolean"),
                                           string("integer"),
                                           string("array"),
                                       },
                                   },
                               },
                               "uniqueItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/uniqueItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "uniqueItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "headers": {
                       SchemaProps: spec.SchemaProps{
                           Type: spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{
                               Allows: true,
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/header"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "header"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "info": {
                       SchemaProps: spec.SchemaProps{
                           Description: "General information about the API.",
                           Type:        spec.StringOrArray{"object"},
                           Required:    []string{"version", "title"},
                           Properties: map[string]spec.Schema{
                               "contact": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/contact"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "contact"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "license": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/license"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "license"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "termsOfService": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "The terms of service for the API.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "title": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A unique and precise title of the API.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "version": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A semantic version number of the API.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "jsonReference": {
                       SchemaProps: spec.SchemaProps{
                           Type:                 spec.StringOrArray{"object"},
                           Required:             []string{"$ref"},
                           Properties:           map[string]spec.Schema{"$ref": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}}},
                           AdditionalProperties: &spec.SchemaOrBool{},
                       },
                   },
                   "license": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"name"},
                           Properties: map[string]spec.Schema{
                               "name": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "The name of the license type. It's encouraged to use an OSI compatible license.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "url": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "The URL pointing to the license.",
                                       Type:        spec.StringOrArray{"string"},
                                       Format:      "uri",
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "maxItems": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/definitions/positiveInteger",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveInteger"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "maxLength": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/definitions/positiveInteger",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveInteger"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "maximum": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/maximum",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "maximum"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "mediaTypeList": {
                       SchemaProps: spec.SchemaProps{
                           Type:        spec.StringOrArray{"array"},
                           UniqueItems: true,
                           Items: &spec.SchemaOrArray{
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/mimeType"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "mimeType"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "mimeType": {
                       SchemaProps: spec.SchemaProps{
                           Description: "The MIME type of the HTTP message.",
                           Type:        spec.StringOrArray{"string"},
                       },
                   },
                   "minItems": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/definitions/positiveIntegerDefault0",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveIntegerDefault0"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "minLength": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/definitions/positiveIntegerDefault0",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveIntegerDefault0"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "minimum": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/minimum",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "minimum"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "multipleOf": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/multipleOf",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "multipleOf"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "nonBodyParameter": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"name", "in", "type"},
                           OneOf: []spec.Schema{
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/headerParameterSubSchema"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "headerParameterSubSchema"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/formDataParameterSubSchema"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "formDataParameterSubSchema"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/queryParameterSubSchema"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "queryParameterSubSchema"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/pathParameterSubSchema"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "pathParameterSubSchema"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "oauth2AccessCodeSecurity": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"type", "flow", "authorizationUrl", "tokenUrl"},
                           Properties: map[string]spec.Schema{
                               "authorizationUrl": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Format: "uri"}},
                               "description":      {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "flow": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("accessCode")}},
                               },
                               "scopes": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/oauth2Scopes"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "oauth2Scopes"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "tokenUrl": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Format: "uri"}},
                               "type": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("oauth2")}},
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "oauth2ApplicationSecurity": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"type", "flow", "tokenUrl"},
                           Properties: map[string]spec.Schema{
                               "description": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "flow": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("application")}},
                               },
                               "scopes": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/oauth2Scopes"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "oauth2Scopes"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "tokenUrl": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Format: "uri"}},
                               "type": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("oauth2")}},
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "oauth2ImplicitSecurity": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"type", "flow", "authorizationUrl"},
                           Properties: map[string]spec.Schema{
                               "authorizationUrl": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Format: "uri"}},
                               "description":      {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "flow": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("implicit")}},
                               },
                               "scopes": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/oauth2Scopes"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "oauth2Scopes"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("oauth2")}},
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "oauth2PasswordSecurity": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"type", "flow", "tokenUrl"},
                           Properties: map[string]spec.Schema{
                               "description": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "flow": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("password")}},
                               },
                               "scopes": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/oauth2Scopes"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "oauth2Scopes"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "tokenUrl": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Format: "uri"}},
                               "type": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}, Enum: []interface{}{string("oauth2")}},
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "oauth2Scopes": {
                       SchemaProps: spec.SchemaProps{
                           Type: spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{
                               Allows: true,
                               Schema: &spec.Schema{SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                           },
                       },
                   },
                   "operation": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"responses"},
                           Properties: map[string]spec.Schema{
                               "consumes": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A list of MIME types the API can consume.",
                                       AllOf: []spec.Schema{
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/mediaTypeList"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "mediaTypeList"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                               "deprecated": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"boolean"}, Default: bool(false)},
                               },
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A longer description of the operation, GitHub Flavored Markdown is allowed.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "externalDocs": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/externalDocs"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "externalDocs"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "operationId": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A unique identifier of the operation.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "parameters": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/parametersList"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "parametersList"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "produces": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A list of MIME types the API can produce.",
                                       AllOf: []spec.Schema{
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/mediaTypeList"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "mediaTypeList"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                               "responses": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/responses"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "responses"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "schemes": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/schemesList"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schemesList"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "security": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/security"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "security"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "summary": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A brief summary of the operation.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "tags": {
                                   SchemaProps: spec.SchemaProps{
                                       Type:        spec.StringOrArray{"array"},
                                       UniqueItems: true,
                                       Items: &spec.SchemaOrArray{
                                           Schema: &spec.Schema{SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "parameter": {
                       SchemaProps: spec.SchemaProps{
                           OneOf: []spec.Schema{
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/bodyParameter"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "bodyParameter"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/nonBodyParameter"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "nonBodyParameter"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "parameterDefinitions": {
                       SchemaProps: spec.SchemaProps{
                           Description: "One or more JSON representations for parameters",
                           Type:        spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{
                               Allows: true,
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/parameter"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "parameter"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "parametersList": {
                       SchemaProps: spec.SchemaProps{
                           Description: "The parameters needed to send a valid API call.",
                           Type:        spec.StringOrArray{"array"},
                           UniqueItems: true,
                           Items: &spec.SchemaOrArray{
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       OneOf: []spec.Schema{
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/parameter"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "parameter"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/jsonReference"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "jsonReference"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalItems: &spec.SchemaOrBool{},
                       },
                   },
                   "pathItem": {
                       SchemaProps: spec.SchemaProps{
                           Type: spec.StringOrArray{"object"},
                           Properties: map[string]spec.Schema{
                               "$ref": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "delete": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/operation"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "operation"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "get": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/operation"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "operation"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "head": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/operation"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "operation"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "options": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/operation"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "operation"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "parameters": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/parametersList"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "parametersList"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "patch": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/operation"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "operation"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "post": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/operation"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "operation"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "put": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/operation"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "operation"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "pathParameterSubSchema": {
                       SchemaProps: spec.SchemaProps{
                           Required: []string{"required"},
                           Properties: map[string]spec.Schema{
                               "collectionFormat": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/collectionFormat"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "collectionFormat"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "default": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/default"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "default"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "enum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/enum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "enum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMaximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMaximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMaximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMinimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMinimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMinimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "format": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "in": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines the location of the parameter.",
                                       Type:        spec.StringOrArray{"string"},
                                       Enum:        []interface{}{string("path")},
                                   },
                               },
                               "items": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/primitivesItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "primitivesItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "multipleOf": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/multipleOf"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "multipleOf"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "name": {
                                   SchemaProps: spec.SchemaProps{Description: "The name of the parameter.", Type: spec.StringOrArray{"string"}},
                               },
                               "pattern": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/pattern"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "pattern"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "required": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines whether or not this parameter is required or optional.",
                                       Type:        spec.StringOrArray{"boolean"},
                                       Enum:        []interface{}{bool(true)},
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{
                                       Type: spec.StringOrArray{"string"},
                                       Enum: []interface{}{
                                           string("string"),
                                           string("number"),
                                           string("boolean"),
                                           string("integer"),
                                           string("array"),
                                       },
                                   },
                               },
                               "uniqueItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/uniqueItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "uniqueItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "paths": {
                       SchemaProps: spec.SchemaProps{
                           Description:          "Relative paths to the individual endpoints. They must be relative to the 'basePath'.",
                           Type:                 spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^/": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/pathItem"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "pathItem"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "pattern": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/pattern",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "pattern"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "primitivesItems": {
                       SchemaProps: spec.SchemaProps{
                           Type: spec.StringOrArray{"object"},
                           Properties: map[string]spec.Schema{
                               "collectionFormat": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/collectionFormat"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "collectionFormat"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "default": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/default"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "default"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "enum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/enum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "enum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMaximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMaximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMaximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMinimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMinimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMinimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "format": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "items": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/primitivesItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "primitivesItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "multipleOf": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/multipleOf"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "multipleOf"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "pattern": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/pattern"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "pattern"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{
                                       Type: spec.StringOrArray{"string"},
                                       Enum: []interface{}{
                                           string("string"),
                                           string("number"),
                                           string("integer"),
                                           string("boolean"),
                                           string("array"),
                                       },
                                   },
                               },
                               "uniqueItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/uniqueItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "uniqueItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "queryParameterSubSchema": {
                       SchemaProps: spec.SchemaProps{
                           Properties: map[string]spec.Schema{
                               "allowEmptyValue": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "allows sending a parameter by name only or with an empty value.",
                                       Type:        spec.StringOrArray{"boolean"},
                                       Default:     bool(false),
                                   },
                               },
                               "collectionFormat": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/collectionFormatWithMulti"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "collectionFormatWithMulti"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "default": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/default"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "default"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.",
                                       Type:        spec.StringOrArray{"string"},
                                   },
                               },
                               "enum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/enum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "enum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMaximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMaximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMaximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMinimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/exclusiveMinimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "exclusiveMinimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "format": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "in": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines the location of the parameter.",
                                       Type:        spec.StringOrArray{"string"},
                                       Enum:        []interface{}{string("query")},
                                   },
                               },
                               "items": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/primitivesItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "primitivesItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maxLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maxLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maxLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "maximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/maximum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "maximum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minLength"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minLength"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "minimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/minimum"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "minimum"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "multipleOf": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/multipleOf"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "multipleOf"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "name": {
                                   SchemaProps: spec.SchemaProps{Description: "The name of the parameter.", Type: spec.StringOrArray{"string"}},
                               },
                               "pattern": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/pattern"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "pattern"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "required": {
                                   SchemaProps: spec.SchemaProps{
                                       Description: "Determines whether or not this parameter is required or optional.",
                                       Type:        spec.StringOrArray{"boolean"},
                                       Default:     bool(false),
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{
                                       Type: spec.StringOrArray{"string"},
                                       Enum: []interface{}{
                                           string("string"),
                                           string("number"),
                                           string("boolean"),
                                           string("integer"),
                                           string("array"),
                                       },
                                   },
                               },
                               "uniqueItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/uniqueItems"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "uniqueItems"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "response": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"description"},
                           Properties: map[string]spec.Schema{
                               "description": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "examples": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/examples"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "examples"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "headers": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/headers"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "headers"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "schema": {
                                   SchemaProps: spec.SchemaProps{
                                       OneOf: []spec.Schema{
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/schema"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schema"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/fileSchema"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "fileSchema"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "responseDefinitions": {
                       SchemaProps: spec.SchemaProps{
                           Description: "One or more JSON representations for responses",
                           Type:        spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{
                               Allows: true,
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/response"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "response"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "responseValue": {
                       SchemaProps: spec.SchemaProps{
                           OneOf: []spec.Schema{
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/response"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "response"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/jsonReference"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "jsonReference"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "responses": {
                       SchemaProps: spec.SchemaProps{
                           Description:   "Response objects names can either be any valid HTTP status code or 'default'.",
                           Type:          spec.StringOrArray{"object"},
                           MinProperties: &1,
                           Not: &spec.Schema{
                               SchemaProps: spec.SchemaProps{
                                   Type:                 spec.StringOrArray{"object"},
                                   AdditionalProperties: &spec.SchemaOrBool{},
                                   PatternProperties: map[string]spec.Schema{
                                       "^x-": {
                                           SchemaProps: spec.SchemaProps{
                                               Ref: spec.Ref{
                                                   Ref: jsonreference.Ref{
                                                       referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                                       referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                                       HasFragmentOnly:  true,
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^([0-9]{3})$|^(default)$": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/responseValue"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "responseValue"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "schema": {
                       SchemaProps: spec.SchemaProps{
                           Description: "A deterministic version of a JSON Schema object.",
                           Type:        spec.StringOrArray{"object"},
                           Properties: map[string]spec.Schema{
                               "$ref": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "additionalProperties": {
                                   SchemaProps: spec.SchemaProps{
                                       Default: map[string]interface{}{},
                                       AnyOf: []spec.Schema{
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/schema"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schema"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"boolean"}}},
                                       },
                                   },
                               },
                               "allOf": {
                                   SchemaProps: spec.SchemaProps{
                                       Type:     spec.StringOrArray{"array"},
                                       MinItems: &1,
                                       Items: &spec.SchemaOrArray{
                                           Schema: &spec.Schema{
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/schema"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schema"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                               "default": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/default",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "default"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "description": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/description",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "description"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "discriminator": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "enum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/enum",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "enum"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "example": {},
                               "exclusiveMaximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/exclusiveMaximum",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "exclusiveMaximum"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "exclusiveMinimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/exclusiveMinimum",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "exclusiveMinimum"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "externalDocs": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/externalDocs"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "externalDocs"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "format": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "items": {
                                   SchemaProps: spec.SchemaProps{
                                       Default: map[string]interface{}{},
                                       AnyOf: []spec.Schema{
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/schema"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schema"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Type:     spec.StringOrArray{"array"},
                                                   MinItems: &1,
                                                   Items: &spec.SchemaOrArray{
                                                       Schema: &spec.Schema{
                                                           SchemaProps: spec.SchemaProps{
                                                               Ref: spec.Ref{
                                                                   Ref: jsonreference.Ref{
                                                                       referenceURL:     &url.URL{Fragment: "/definitions/schema"},
                                                                       referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schema"}},
                                                                       HasFragmentOnly:  true,
                                                                   },
                                                               },
                                                           },
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                               "maxItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/definitions/positiveInteger",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveInteger"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "maxLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/definitions/positiveInteger",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveInteger"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "maxProperties": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/definitions/positiveInteger",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveInteger"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "maximum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/maximum",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "maximum"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "minItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/definitions/positiveIntegerDefault0",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveIntegerDefault0"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "minLength": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/definitions/positiveIntegerDefault0",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveIntegerDefault0"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "minProperties": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/definitions/positiveIntegerDefault0",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "positiveIntegerDefault0"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "minimum": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/minimum",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "minimum"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "multipleOf": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/multipleOf",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "multipleOf"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "pattern": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/pattern",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "pattern"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "properties": {
                                   SchemaProps: spec.SchemaProps{
                                       Type:    spec.StringOrArray{"object"},
                                       Default: map[string]interface{}{},
                                       AdditionalProperties: &spec.SchemaOrBool{
                                           Allows: true,
                                           Schema: &spec.Schema{
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/schema"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "schema"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                               "readOnly": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"boolean"}, Default: bool(false)},
                               },
                               "required": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/definitions/stringArray",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "stringArray"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "title": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/title",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "title"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "type": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/type",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "type"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "uniqueItems": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL: &url.URL{
                                                   Scheme:   "http",
                                                   Host:     "json-schema.org",
                                                   Path:     "/draft-04/schema",
                                                   Fragment: "/properties/uniqueItems",
                                               },
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "uniqueItems"}},
                                               HasFullURL:       true,
                                               HasFullFilePath:  true,
                                           },
                                       },
                                   },
                               },
                               "xml": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/xml"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "xml"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "schemesList": {
                       SchemaProps: spec.SchemaProps{
                           Description: "The transfer protocol of the API.",
                           Type:        spec.StringOrArray{"array"},
                           UniqueItems: true,
                           Items: &spec.SchemaOrArray{
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Type: spec.StringOrArray{"string"},
                                       Enum: []interface{}{string("http"), string("https"), string("ws"), string("wss")},
                                   },
                               },
                           },
                       },
                   },
                   "security": {
                       SchemaProps: spec.SchemaProps{
                           Type:        spec.StringOrArray{"array"},
                           UniqueItems: true,
                           Items: &spec.SchemaOrArray{
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/securityRequirement"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "securityRequirement"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "securityDefinitions": {
                       SchemaProps: spec.SchemaProps{
                           Type: spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{
                               Allows: true,
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       OneOf: []spec.Schema{
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/basicAuthenticationSecurity"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "basicAuthenticationSecurity"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/apiKeySecurity"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "apiKeySecurity"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/oauth2ImplicitSecurity"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "oauth2ImplicitSecurity"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/oauth2PasswordSecurity"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "oauth2PasswordSecurity"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/oauth2ApplicationSecurity"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "oauth2ApplicationSecurity"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                           {
                                               SchemaProps: spec.SchemaProps{
                                                   Ref: spec.Ref{
                                                       Ref: jsonreference.Ref{
                                                           referenceURL:     &url.URL{Fragment: "/definitions/oauth2AccessCodeSecurity"},
                                                           referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "oauth2AccessCodeSecurity"}},
                                                           HasFragmentOnly:  true,
                                                       },
                                                   },
                                               },
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "securityRequirement": {
                       SchemaProps: spec.SchemaProps{
                           Type: spec.StringOrArray{"object"},
                           AdditionalProperties: &spec.SchemaOrBool{
                               Allows: true,
                               Schema: &spec.Schema{
                                   SchemaProps: spec.SchemaProps{
                                       Type:        spec.StringOrArray{"array"},
                                       UniqueItems: true,
                                       Items: &spec.SchemaOrArray{
                                           Schema: &spec.Schema{SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "tag": {
                       SchemaProps: spec.SchemaProps{
                           Type:     spec.StringOrArray{"object"},
                           Required: []string{"name"},
                           Properties: map[string]spec.Schema{
                               "description": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "externalDocs": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/externalDocs"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "externalDocs"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                               "name": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
                   "title": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/title",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "title"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "uniqueItems": {
                       SchemaProps: spec.SchemaProps{
                           Ref: spec.Ref{
                               Ref: jsonreference.Ref{
                                   referenceURL: &url.URL{
                                       Scheme:   "http",
                                       Host:     "json-schema.org",
                                       Path:     "/draft-04/schema",
                                       Fragment: "/properties/uniqueItems",
                                   },
                                   referencePointer: jsonpointer.Pointer{referenceTokens: []string{"properties", "uniqueItems"}},
                                   HasFullURL:       true,
                                   HasFullFilePath:  true,
                               },
                           },
                       },
                   },
                   "vendorExtension": {
                       SchemaProps: spec.SchemaProps{
                           Description:          "Any property starting with x- is valid.",
                           AdditionalProperties: &spec.SchemaOrBool{Allows: true},
                           AdditionalItems:      &spec.SchemaOrBool{Allows: true},
                       },
                   },
                   "xml": {
                       SchemaProps: spec.SchemaProps{
                           Type: spec.StringOrArray{"object"},
                           Properties: map[string]spec.Schema{
                               "attribute": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"boolean"}, Default: bool(false)},
                               },
                               "name":      {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "namespace": {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "prefix":    {SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"string"}}},
                               "wrapped": {
                                   SchemaProps: spec.SchemaProps{Type: spec.StringOrArray{"boolean"}, Default: bool(false)},
                               },
                           },
                           AdditionalProperties: &spec.SchemaOrBool{},
                           PatternProperties: map[string]spec.Schema{
                               "^x-": {
                                   SchemaProps: spec.SchemaProps{
                                       Ref: spec.Ref{
                                           Ref: jsonreference.Ref{
                                               referenceURL:     &url.URL{Fragment: "/definitions/vendorExtension"},
                                               referencePointer: jsonpointer.Pointer{referenceTokens: []string{"definitions", "vendorExtension"}},
                                               HasFragmentOnly:  true,
                                           },
                                       },
                                   },
                               },
                           },
                       },
                   },
               },
           },
       },
       raw: json.RawMessage{
           0x7b,
           0x22,
           0x6f,
           0x70,
           0x65,
           0x6e,
           0x61,
           0x70,
           0x69,
           0x22,
           0x3a,
           0x22,
           0x33,
           0x2e,
           0x30,
           0x2e,
           0x30,
           0x22,
           0x2c,
           0x22,
           0x69,
           0x6e,
           0x66,
           0x6f,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x76,
           0x65,
           0x72,
           0x73,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x31,
           0x2e,
           0x30,
           0x2e,
           0x30,
           0x22,
           0x2c,
           0x22,
           0x74,
           0x69,
           0x74,
           0x6c,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x53,
           0x77,
           0x61,
           0x67,
           0x67,
           0x65,
           0x72,
           0x20,
           0x50,
           0x65,
           0x74,
           0x73,
           0x74,
           0x6f,
           0x72,
           0x65,
           0x22,
           0x2c,
           0x22,
           0x6c,
           0x69,
           0x63,
           0x65,
           0x6e,
           0x73,
           0x65,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x6e,
           0x61,
           0x6d,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x4d,
           0x49,
           0x54,
           0x22,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x73,
           0x65,
           0x72,
           0x76,
           0x65,
           0x72,
           0x73,
           0x22,
           0x3a,
           0x5b,
           0x7b,
           0x22,
           0x75,
           0x72,
           0x6c,
           0x22,
           0x3a,
           0x22,
           0x68,
           0x74,
           0x74,
           0x70,
           0x3a,
           0x2f,
           0x2f,
           0x70,
           0x65,
           0x74,
           0x73,
           0x74,
           0x6f,
           0x72,
           0x65,
           0x2e,
           0x73,
           0x77,
           0x61,
           0x67,
           0x67,
           0x65,
           0x72,
           0x2e,
           0x69,
           0x6f,
           0x2f,
           0x76,
           0x31,
           0x22,
           0x7d,
           0x5d,
           0x2c,
           0x22,
           0x70,
           0x61,
           0x74,
           0x68,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x2f,
           0x70,
           0x65,
           0x74,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x67,
           0x65,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x75,
           0x6d,
           0x6d,
           0x61,
           0x72,
           0x79,
           0x22,
           0x3a,
           0x22,
           0x4c,
           0x69,
           0x73,
           0x74,
           0x20,
           0x61,
           0x6c,
           0x6c,
           0x20,
           0x70,
           0x65,
           0x74,
           0x73,
           0x22,
           0x2c,
           0x22,
           0x6f,
           0x70,
           0x65,
           0x72,
           0x61,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x49,
           0x64,
           0x22,
           0x3a,
           0x22,
           0x6c,
           0x69,
           0x73,
           0x74,
           0x50,
           0x65,
           0x74,
           0x73,
           0x22,
           0x2c,
           0x22,
           0x74,
           0x61,
           0x67,
           0x73,
           0x22,
           0x3a,
           0x5b,
           0x22,
           0x70,
           0x65,
           0x74,
           0x73,
           0x22,
           0x5d,
           0x2c,
           0x22,
           0x70,
           0x61,
           0x72,
           0x61,
           0x6d,
           0x65,
           0x74,
           0x65,
           0x72,
           0x73,
           0x22,
           0x3a,
           0x5b,
           0x7b,
           0x22,
           0x6e,
           0x61,
           0x6d,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x6c,
           0x69,
           0x6d,
           0x69,
           0x74,
           0x22,
           0x2c,
           0x22,
           0x69,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x71,
           0x75,
           0x65,
           0x72,
           0x79,
           0x22,
           0x2c,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x48,
           0x6f,
           0x77,
           0x20,
           0x6d,
           0x61,
           0x6e,
           0x79,
           0x20,
           0x69,
           0x74,
           0x65,
           0x6d,
           0x73,
           0x20,
           0x74,
           0x6f,
           0x20,
           0x72,
           0x65,
           0x74,
           0x75,
           0x72,
           0x6e,
           0x20,
           0x61,
           0x74,
           0x20,
           0x6f,
           0x6e,
           0x65,
           0x20,
           0x74,
           0x69,
           0x6d,
           0x65,
           0x20,
           0x28,
           0x6d,
           0x61,
           0x78,
           0x20,
           0x31,
           0x30,
           0x30,
           0x29,
           0x22,
           0x2c,
           0x22,
           0x72,
           0x65,
           0x71,
           0x75,
           0x69,
           0x72,
           0x65,
           0x64,
           0x22,
           0x3a,
           0x66,
           0x61,
           0x6c,
           0x73,
           0x65,
           0x2c,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x69,
           0x6e,
           0x74,
           0x65,
           0x67,
           0x65,
           0x72,
           0x22,
           0x2c,
           0x22,
           0x66,
           0x6f,
           0x72,
           0x6d,
           0x61,
           0x74,
           0x22,
           0x3a,
           0x22,
           0x69,
           0x6e,
           0x74,
           0x33,
           0x32,
           0x22,
           0x7d,
           0x7d,
           0x5d,
           0x2c,
           0x22,
           0x72,
           0x65,
           0x73,
           0x70,
           0x6f,
           0x6e,
           0x73,
           0x65,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x32,
           0x30,
           0x30,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x41,
           0x20,
           0x70,
           0x61,
           0x67,
           0x65,
           0x64,
           0x20,
           0x61,
           0x72,
           0x72,
           0x61,
           0x79,
           0x20,
           0x6f,
           0x66,
           0x20,
           0x70,
           0x65,
           0x74,
           0x73,
           0x22,
           0x2c,
           0x22,
           0x68,
           0x65,
           0x61,
           0x64,
           0x65,
           0x72,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x78,
           0x2d,
           0x6e,
           0x65,
           0x78,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x41,
           0x20,
           0x6c,
           0x69,
           0x6e,
           0x6b,
           0x20,
           0x74,
           0x6f,
           0x20,
           0x74,
           0x68,
           0x65,
           0x20,
           0x6e,
           0x65,
           0x78,
           0x74,
           0x20,
           0x70,
           0x61,
           0x67,
           0x65,
           0x20,
           0x6f,
           0x66,
           0x20,
           0x72,
           0x65,
           0x73,
           0x70,
           0x6f,
           0x6e,
           0x73,
           0x65,
           0x73,
           0x22,
           0x2c,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x73,
           0x74,
           0x72,
           0x69,
           0x6e,
           0x67,
           0x22,
           0x7d,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x63,
           0x6f,
           0x6e,
           0x74,
           0x65,
           0x6e,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x61,
           0x70,
           0x70,
           0x6c,
           0x69,
           0x63,
           0x61,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x2f,
           0x6a,
           0x73,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x24,
           0x72,
           0x65,
           0x66,
           0x22,
           0x3a,
           0x22,
           0x23,
           0x2f,
           0x63,
           0x6f,
           0x6d,
           0x70,
           0x6f,
           0x6e,
           0x65,
           0x6e,
           0x74,
           0x73,
           0x2f,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x73,
           0x2f,
           0x50,
           0x65,
           0x74,
           0x73,
           0x22,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x64,
           0x65,
           0x66,
           0x61,
           0x75,
           0x6c,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x75,
           0x6e,
           0x65,
           0x78,
           0x70,
           0x65,
           0x63,
           0x74,
           0x65,
           0x64,
           0x20,
           0x65,
           0x72,
           0x72,
           0x6f,
           0x72,
           0x22,
           0x2c,
           0x22,
           0x63,
           0x6f,
           0x6e,
           0x74,
           0x65,
           0x6e,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x61,
           0x70,
           0x70,
           0x6c,
           0x69,
           0x63,
           0x61,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x2f,
           0x6a,
           0x73,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x24,
           0x72,
           0x65,
           0x66,
           0x22,
           0x3a,
           0x22,
           0x23,
           0x2f,
           0x63,
           0x6f,
           0x6d,
           0x70,
           0x6f,
           0x6e,
           0x65,
           0x6e,
           0x74,
           0x73,
           0x2f,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x73,
           0x2f,
           0x45,
           0x72,
           0x72,
           0x6f,
           0x72,
           0x22,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x70,
           0x6f,
           0x73,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x75,
           0x6d,
           0x6d,
           0x61,
           0x72,
           0x79,
           0x22,
           0x3a,
           0x22,
           0x43,
           0x72,
           0x65,
           0x61,
           0x74,
           0x65,
           0x20,
           0x61,
           0x20,
           0x70,
           0x65,
           0x74,
           0x22,
           0x2c,
           0x22,
           0x6f,
           0x70,
           0x65,
           0x72,
           0x61,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x49,
           0x64,
           0x22,
           0x3a,
           0x22,
           0x63,
           0x72,
           0x65,
           0x61,
           0x74,
           0x65,
           0x50,
           0x65,
           0x74,
           0x73,
           0x22,
           0x2c,
           0x22,
           0x74,
           0x61,
           0x67,
           0x73,
           0x22,
           0x3a,
           0x5b,
           0x22,
           0x70,
           0x65,
           0x74,
           0x73,
           0x22,
           0x5d,
           0x2c,
           0x22,
           0x72,
           0x65,
           0x73,
           0x70,
           0x6f,
           0x6e,
           0x73,
           0x65,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x32,
           0x30,
           0x31,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x4e,
           0x75,
           0x6c,
           0x6c,
           0x20,
           0x72,
           0x65,
           0x73,
           0x70,
           0x6f,
           0x6e,
           0x73,
           0x65,
           0x22,
           0x7d,
           0x2c,
           0x22,
           0x64,
           0x65,
           0x66,
           0x61,
           0x75,
           0x6c,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x75,
           0x6e,
           0x65,
           0x78,
           0x70,
           0x65,
           0x63,
           0x74,
           0x65,
           0x64,
           0x20,
           0x65,
           0x72,
           0x72,
           0x6f,
           0x72,
           0x22,
           0x2c,
           0x22,
           0x63,
           0x6f,
           0x6e,
           0x74,
           0x65,
           0x6e,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x61,
           0x70,
           0x70,
           0x6c,
           0x69,
           0x63,
           0x61,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x2f,
           0x6a,
           0x73,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x24,
           0x72,
           0x65,
           0x66,
           0x22,
           0x3a,
           0x22,
           0x23,
           0x2f,
           0x63,
           0x6f,
           0x6d,
           0x70,
           0x6f,
           0x6e,
           0x65,
           0x6e,
           0x74,
           0x73,
           0x2f,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x73,
           0x2f,
           0x45,
           0x72,
           0x72,
           0x6f,
           0x72,
           0x22,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x2f,
           0x70,
           0x65,
           0x74,
           0x73,
           0x2f,
           0x7b,
           0x70,
           0x65,
           0x74,
           0x49,
           0x64,
           0x7d,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x67,
           0x65,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x75,
           0x6d,
           0x6d,
           0x61,
           0x72,
           0x79,
           0x22,
           0x3a,
           0x22,
           0x49,
           0x6e,
           0x66,
           0x6f,
           0x20,
           0x66,
           0x6f,
           0x72,
           0x20,
           0x61,
           0x20,
           0x73,
           0x70,
           0x65,
           0x63,
           0x69,
           0x66,
           0x69,
           0x63,
           0x20,
           0x70,
           0x65,
           0x74,
           0x22,
           0x2c,
           0x22,
           0x6f,
           0x70,
           0x65,
           0x72,
           0x61,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x49,
           0x64,
           0x22,
           0x3a,
           0x22,
           0x73,
           0x68,
           0x6f,
           0x77,
           0x50,
           0x65,
           0x74,
           0x42,
           0x79,
           0x49,
           0x64,
           0x22,
           0x2c,
           0x22,
           0x74,
           0x61,
           0x67,
           0x73,
           0x22,
           0x3a,
           0x5b,
           0x22,
           0x70,
           0x65,
           0x74,
           0x73,
           0x22,
           0x5d,
           0x2c,
           0x22,
           0x70,
           0x61,
           0x72,
           0x61,
           0x6d,
           0x65,
           0x74,
           0x65,
           0x72,
           0x73,
           0x22,
           0x3a,
           0x5b,
           0x7b,
           0x22,
           0x6e,
           0x61,
           0x6d,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x70,
           0x65,
           0x74,
           0x49,
           0x64,
           0x22,
           0x2c,
           0x22,
           0x69,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x70,
           0x61,
           0x74,
           0x68,
           0x22,
           0x2c,
           0x22,
           0x72,
           0x65,
           0x71,
           0x75,
           0x69,
           0x72,
           0x65,
           0x64,
           0x22,
           0x3a,
           0x74,
           0x72,
           0x75,
           0x65,
           0x2c,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x54,
           0x68,
           0x65,
           0x20,
           0x69,
           0x64,
           0x20,
           0x6f,
           0x66,
           0x20,
           0x74,
           0x68,
           0x65,
           0x20,
           0x70,
           0x65,
           0x74,
           0x20,
           0x74,
           0x6f,
           0x20,
           0x72,
           0x65,
           0x74,
           0x72,
           0x69,
           0x65,
           0x76,
           0x65,
           0x22,
           0x2c,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x73,
           0x74,
           0x72,
           0x69,
           0x6e,
           0x67,
           0x22,
           0x7d,
           0x7d,
           0x5d,
           0x2c,
           0x22,
           0x72,
           0x65,
           0x73,
           0x70,
           0x6f,
           0x6e,
           0x73,
           0x65,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x32,
           0x30,
           0x30,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x45,
           0x78,
           0x70,
           0x65,
           0x63,
           0x74,
           0x65,
           0x64,
           0x20,
           0x72,
           0x65,
           0x73,
           0x70,
           0x6f,
           0x6e,
           0x73,
           0x65,
           0x20,
           0x74,
           0x6f,
           0x20,
           0x61,
           0x20,
           0x76,
           0x61,
           0x6c,
           0x69,
           0x64,
           0x20,
           0x72,
           0x65,
           0x71,
           0x75,
           0x65,
           0x73,
           0x74,
           0x22,
           0x2c,
           0x22,
           0x63,
           0x6f,
           0x6e,
           0x74,
           0x65,
           0x6e,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x61,
           0x70,
           0x70,
           0x6c,
           0x69,
           0x63,
           0x61,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x2f,
           0x6a,
           0x73,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x24,
           0x72,
           0x65,
           0x66,
           0x22,
           0x3a,
           0x22,
           0x23,
           0x2f,
           0x63,
           0x6f,
           0x6d,
           0x70,
           0x6f,
           0x6e,
           0x65,
           0x6e,
           0x74,
           0x73,
           0x2f,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x73,
           0x2f,
           0x50,
           0x65,
           0x74,
           0x22,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x64,
           0x65,
           0x66,
           0x61,
           0x75,
           0x6c,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x64,
           0x65,
           0x73,
           0x63,
           0x72,
           0x69,
           0x70,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x22,
           0x75,
           0x6e,
           0x65,
           0x78,
           0x70,
           0x65,
           0x63,
           0x74,
           0x65,
           0x64,
           0x20,
           0x65,
           0x72,
           0x72,
           0x6f,
           0x72,
           0x22,
           0x2c,
           0x22,
           0x63,
           0x6f,
           0x6e,
           0x74,
           0x65,
           0x6e,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x61,
           0x70,
           0x70,
           0x6c,
           0x69,
           0x63,
           0x61,
           0x74,
           0x69,
           0x6f,
           0x6e,
           0x2f,
           0x6a,
           0x73,
           0x6f,
           0x6e,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x24,
           0x72,
           0x65,
           0x66,
           0x22,
           0x3a,
           0x22,
           0x23,
           0x2f,
           0x63,
           0x6f,
           0x6d,
           0x70,
           0x6f,
           0x6e,
           0x65,
           0x6e,
           0x74,
           0x73,
           0x2f,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x73,
           0x2f,
           0x45,
           0x72,
           0x72,
           0x6f,
           0x72,
           0x22,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x63,
           0x6f,
           0x6d,
           0x70,
           0x6f,
           0x6e,
           0x65,
           0x6e,
           0x74,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x50,
           0x65,
           0x74,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x6f,
           0x62,
           0x6a,
           0x65,
           0x63,
           0x74,
           0x22,
           0x2c,
           0x22,
           0x72,
           0x65,
           0x71,
           0x75,
           0x69,
           0x72,
           0x65,
           0x64,
           0x22,
           0x3a,
           0x5b,
           0x22,
           0x69,
           0x64,
           0x22,
           0x2c,
           0x22,
           0x6e,
           0x61,
           0x6d,
           0x65,
           0x22,
           0x5d,
           0x2c,
           0x22,
           0x70,
           0x72,
           0x6f,
           0x70,
           0x65,
           0x72,
           0x74,
           0x69,
           0x65,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x69,
           0x64,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x69,
           0x6e,
           0x74,
           0x65,
           0x67,
           0x65,
           0x72,
           0x22,
           0x2c,
           0x22,
           0x66,
           0x6f,
           0x72,
           0x6d,
           0x61,
           0x74,
           0x22,
           0x3a,
           0x22,
           0x69,
           0x6e,
           0x74,
           0x36,
           0x34,
           0x22,
           0x7d,
           0x2c,
           0x22,
           0x6e,
           0x61,
           0x6d,
           0x65,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x73,
           0x74,
           0x72,
           0x69,
           0x6e,
           0x67,
           0x22,
           0x7d,
           0x2c,
           0x22,
           0x74,
           0x61,
           0x67,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x73,
           0x74,
           0x72,
           0x69,
           0x6e,
           0x67,
           0x22,
           0x7d,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x50,
           0x65,
           0x74,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x61,
           0x72,
           0x72,
           0x61,
           0x79,
           0x22,
           0x2c,
           0x22,
           0x69,
           0x74,
           0x65,
           0x6d,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x24,
           0x72,
           0x65,
           0x66,
           0x22,
           0x3a,
           0x22,
           0x23,
           0x2f,
           0x63,
           0x6f,
           0x6d,
           0x70,
           0x6f,
           0x6e,
           0x65,
           0x6e,
           0x74,
           0x73,
           0x2f,
           0x73,
           0x63,
           0x68,
           0x65,
           0x6d,
           0x61,
           0x73,
           0x2f,
           0x50,
           0x65,
           0x74,
           0x22,
           0x7d,
           0x7d,
           0x2c,
           0x22,
           0x45,
           0x72,
           0x72,
           0x6f,
           0x72,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x6f,
           0x62,
           0x6a,
           0x65,
           0x63,
           0x74,
           0x22,
           0x2c,
           0x22,
           0x72,
           0x65,
           0x71,
           0x75,
           0x69,
           0x72,
           0x65,
           0x64,
           0x22,
           0x3a,
           0x5b,
           0x22,
           0x63,
           0x6f,
           0x64,
           0x65,
           0x22,
           0x2c,
           0x22,
           0x6d,
           0x65,
           0x73,
           0x73,
           0x61,
           0x67,
           0x65,
           0x22,
           0x5d,
           0x2c,
           0x22,
           0x70,
           0x72,
           0x6f,
           0x70,
           0x65,
           0x72,
           0x74,
           0x69,
           0x65,
           0x73,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x63,
           0x6f,
           0x64,
           0x65,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x69,
           0x6e,
           0x74,
           0x65,
           0x67,
           0x65,
           0x72,
           0x22,
           0x2c,
           0x22,
           0x66,
           0x6f,
           0x72,
           0x6d,
           0x61,
           0x74,
           0x22,
           0x3a,
           0x22,
           0x69,
           0x6e,
           0x74,
           0x33,
           0x32,
           0x22,
           0x7d,
           0x2c,
           0x22,
           0x6d,
           0x65,
           0x73,
           0x73,
           0x61,
           0x67,
           0x65,
           0x22,
           0x3a,
           0x7b,
           0x22,
           0x74,
           0x79,
           0x70,
           0x65,
           0x22,
           0x3a,
           0x22,
           0x73,
           0x74,
           0x72,
           0x69,
           0x6e,
           0x67,
           0x22,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
           0x7d,
       },
   },
              )


