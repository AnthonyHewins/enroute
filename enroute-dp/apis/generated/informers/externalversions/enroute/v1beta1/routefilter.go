// SPDX-License-Identifier: Apache-2.0
// Copyright(c) 2018-2021 Saaras Inc.

/*
Copyright 2019  Heptio

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	time "time"

	enroutev1beta1 "github.com/saarasio/enroute/enroute-dp/apis/enroute/v1beta1"
	versioned "github.com/saarasio/enroute/enroute-dp/apis/generated/clientset/versioned"
	internalinterfaces "github.com/saarasio/enroute/enroute-dp/apis/generated/informers/externalversions/internalinterfaces"
	v1beta1 "github.com/saarasio/enroute/enroute-dp/apis/generated/listers/enroute/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// RouteFilterInformer provides access to a shared informer and lister for
// RouteFilters.
type RouteFilterInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1beta1.RouteFilterLister
}

type routeFilterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewRouteFilterInformer constructs a new informer for RouteFilter type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRouteFilterInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredRouteFilterInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredRouteFilterInformer constructs a new informer for RouteFilter type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRouteFilterInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EnrouteV1beta1().RouteFilters(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EnrouteV1beta1().RouteFilters(namespace).Watch(context.TODO(), options)
			},
		},
		&enroutev1beta1.RouteFilter{},
		resyncPeriod,
		indexers,
	)
}

func (f *routeFilterInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredRouteFilterInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *routeFilterInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&enroutev1beta1.RouteFilter{}, f.defaultInformer)
}

func (f *routeFilterInformer) Lister() v1beta1.RouteFilterLister {
	return v1beta1.NewRouteFilterLister(f.Informer().GetIndexer())
}
