// SPDX-License-Identifier: Apache-2.0
// Copyright(c) 2018-2021 Saaras Inc.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/saarasio/enroute/enroute-dp/apis/enroute/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayHostLister helps list GatewayHosts.
// All objects returned here must be treated as read-only.
type GatewayHostLister interface {
	// List lists all GatewayHosts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GatewayHost, err error)
	// GatewayHosts returns an object that can list and get GatewayHosts.
	GatewayHosts(namespace string) GatewayHostNamespaceLister
	GatewayHostListerExpansion
}

// gatewayHostLister implements the GatewayHostLister interface.
type gatewayHostLister struct {
	indexer cache.Indexer
}

// NewGatewayHostLister returns a new GatewayHostLister.
func NewGatewayHostLister(indexer cache.Indexer) GatewayHostLister {
	return &gatewayHostLister{indexer: indexer}
}

// List lists all GatewayHosts in the indexer.
func (s *gatewayHostLister) List(selector labels.Selector) (ret []*v1.GatewayHost, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GatewayHost))
	})
	return ret, err
}

// GatewayHosts returns an object that can list and get GatewayHosts.
func (s *gatewayHostLister) GatewayHosts(namespace string) GatewayHostNamespaceLister {
	return gatewayHostNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayHostNamespaceLister helps list and get GatewayHosts.
// All objects returned here must be treated as read-only.
type GatewayHostNamespaceLister interface {
	// List lists all GatewayHosts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GatewayHost, err error)
	// Get retrieves the GatewayHost from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.GatewayHost, error)
	GatewayHostNamespaceListerExpansion
}

// gatewayHostNamespaceLister implements the GatewayHostNamespaceLister
// interface.
type gatewayHostNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayHosts in the indexer for a given namespace.
func (s gatewayHostNamespaceLister) List(selector labels.Selector) (ret []*v1.GatewayHost, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GatewayHost))
	})
	return ret, err
}

// Get retrieves the GatewayHost from the indexer for a given namespace and name.
func (s gatewayHostNamespaceLister) Get(name string) (*v1.GatewayHost, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gatewayhost"), name)
	}
	return obj.(*v1.GatewayHost), nil
}
