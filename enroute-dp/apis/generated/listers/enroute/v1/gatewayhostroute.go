// SPDX-License-Identifier: Apache-2.0
// Copyright(c) 2018-2021 Saaras Inc.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/saarasio/enroute/enroute-dp/apis/enroute/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayHostRouteLister helps list GatewayHostRoutes.
// All objects returned here must be treated as read-only.
type GatewayHostRouteLister interface {
	// List lists all GatewayHostRoutes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GatewayHostRoute, err error)
	// GatewayHostRoutes returns an object that can list and get GatewayHostRoutes.
	GatewayHostRoutes(namespace string) GatewayHostRouteNamespaceLister
	GatewayHostRouteListerExpansion
}

// gatewayHostRouteLister implements the GatewayHostRouteLister interface.
type gatewayHostRouteLister struct {
	indexer cache.Indexer
}

// NewGatewayHostRouteLister returns a new GatewayHostRouteLister.
func NewGatewayHostRouteLister(indexer cache.Indexer) GatewayHostRouteLister {
	return &gatewayHostRouteLister{indexer: indexer}
}

// List lists all GatewayHostRoutes in the indexer.
func (s *gatewayHostRouteLister) List(selector labels.Selector) (ret []*v1.GatewayHostRoute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GatewayHostRoute))
	})
	return ret, err
}

// GatewayHostRoutes returns an object that can list and get GatewayHostRoutes.
func (s *gatewayHostRouteLister) GatewayHostRoutes(namespace string) GatewayHostRouteNamespaceLister {
	return gatewayHostRouteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayHostRouteNamespaceLister helps list and get GatewayHostRoutes.
// All objects returned here must be treated as read-only.
type GatewayHostRouteNamespaceLister interface {
	// List lists all GatewayHostRoutes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GatewayHostRoute, err error)
	// Get retrieves the GatewayHostRoute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.GatewayHostRoute, error)
	GatewayHostRouteNamespaceListerExpansion
}

// gatewayHostRouteNamespaceLister implements the GatewayHostRouteNamespaceLister
// interface.
type gatewayHostRouteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayHostRoutes in the indexer for a given namespace.
func (s gatewayHostRouteNamespaceLister) List(selector labels.Selector) (ret []*v1.GatewayHostRoute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GatewayHostRoute))
	})
	return ret, err
}

// Get retrieves the GatewayHostRoute from the indexer for a given namespace and name.
func (s gatewayHostRouteNamespaceLister) Get(name string) (*v1.GatewayHostRoute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gatewayhostroute"), name)
	}
	return obj.(*v1.GatewayHostRoute), nil
}
