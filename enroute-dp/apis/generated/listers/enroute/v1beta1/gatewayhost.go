// SPDX-License-Identifier: Apache-2.0
// Copyright(c) 2018-2020 Saaras Inc.

/*
Copyright 2019  Heptio

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/saarasio/enroute/enroute-dp/apis/enroute/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayHostLister helps list GatewayHosts.
type GatewayHostLister interface {
	// List lists all GatewayHosts in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.GatewayHost, err error)
	// GatewayHosts returns an object that can list and get GatewayHosts.
	GatewayHosts(namespace string) GatewayHostNamespaceLister
	GatewayHostListerExpansion
}

// gatewayHostLister implements the GatewayHostLister interface.
type gatewayHostLister struct {
	indexer cache.Indexer
}

// NewGatewayHostLister returns a new GatewayHostLister.
func NewGatewayHostLister(indexer cache.Indexer) GatewayHostLister {
	return &gatewayHostLister{indexer: indexer}
}

// List lists all GatewayHosts in the indexer.
func (s *gatewayHostLister) List(selector labels.Selector) (ret []*v1beta1.GatewayHost, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.GatewayHost))
	})
	return ret, err
}

// GatewayHosts returns an object that can list and get GatewayHosts.
func (s *gatewayHostLister) GatewayHosts(namespace string) GatewayHostNamespaceLister {
	return gatewayHostNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayHostNamespaceLister helps list and get GatewayHosts.
type GatewayHostNamespaceLister interface {
	// List lists all GatewayHosts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.GatewayHost, err error)
	// Get retrieves the GatewayHost from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.GatewayHost, error)
	GatewayHostNamespaceListerExpansion
}

// gatewayHostNamespaceLister implements the GatewayHostNamespaceLister
// interface.
type gatewayHostNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayHosts in the indexer for a given namespace.
func (s gatewayHostNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.GatewayHost, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.GatewayHost))
	})
	return ret, err
}

// Get retrieves the GatewayHost from the indexer for a given namespace and name.
func (s gatewayHostNamespaceLister) Get(name string) (*v1beta1.GatewayHost, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("gatewayhost"), name)
	}
	return obj.(*v1beta1.GatewayHost), nil
}
