// SPDX-License-Identifier: Apache-2.0
// Copyright(c) 2018-2020 Saaras Inc.

/*
Copyright 2019  Heptio

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/saarasio/enroute/enroute-dp/apis/enroute/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HttpFilterLister helps list HttpFilters.
type HttpFilterLister interface {
	// List lists all HttpFilters in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.HttpFilter, err error)
	// HttpFilters returns an object that can list and get HttpFilters.
	HttpFilters(namespace string) HttpFilterNamespaceLister
	HttpFilterListerExpansion
}

// httpFilterLister implements the HttpFilterLister interface.
type httpFilterLister struct {
	indexer cache.Indexer
}

// NewHttpFilterLister returns a new HttpFilterLister.
func NewHttpFilterLister(indexer cache.Indexer) HttpFilterLister {
	return &httpFilterLister{indexer: indexer}
}

// List lists all HttpFilters in the indexer.
func (s *httpFilterLister) List(selector labels.Selector) (ret []*v1beta1.HttpFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.HttpFilter))
	})
	return ret, err
}

// HttpFilters returns an object that can list and get HttpFilters.
func (s *httpFilterLister) HttpFilters(namespace string) HttpFilterNamespaceLister {
	return httpFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HttpFilterNamespaceLister helps list and get HttpFilters.
type HttpFilterNamespaceLister interface {
	// List lists all HttpFilters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.HttpFilter, err error)
	// Get retrieves the HttpFilter from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.HttpFilter, error)
	HttpFilterNamespaceListerExpansion
}

// httpFilterNamespaceLister implements the HttpFilterNamespaceLister
// interface.
type httpFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HttpFilters in the indexer for a given namespace.
func (s httpFilterNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.HttpFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.HttpFilter))
	})
	return ret, err
}

// Get retrieves the HttpFilter from the indexer for a given namespace and name.
func (s httpFilterNamespaceLister) Get(name string) (*v1beta1.HttpFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("httpfilter"), name)
	}
	return obj.(*v1beta1.HttpFilter), nil
}
