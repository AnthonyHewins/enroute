// SPDX-License-Identifier: Apache-2.0
// Copyright(c) 2018-2019 Saaras Inc.

/*
Copyright 2019  Heptio

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/saarasio/enroute/enroute-dp/apis/enroute/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlobalConfigLister helps list GlobalConfigs.
type GlobalConfigLister interface {
	// List lists all GlobalConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.GlobalConfig, err error)
	// GlobalConfigs returns an object that can list and get GlobalConfigs.
	GlobalConfigs(namespace string) GlobalConfigNamespaceLister
	GlobalConfigListerExpansion
}

// globalConfigLister implements the GlobalConfigLister interface.
type globalConfigLister struct {
	indexer cache.Indexer
}

// NewGlobalConfigLister returns a new GlobalConfigLister.
func NewGlobalConfigLister(indexer cache.Indexer) GlobalConfigLister {
	return &globalConfigLister{indexer: indexer}
}

// List lists all GlobalConfigs in the indexer.
func (s *globalConfigLister) List(selector labels.Selector) (ret []*v1beta1.GlobalConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.GlobalConfig))
	})
	return ret, err
}

// GlobalConfigs returns an object that can list and get GlobalConfigs.
func (s *globalConfigLister) GlobalConfigs(namespace string) GlobalConfigNamespaceLister {
	return globalConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlobalConfigNamespaceLister helps list and get GlobalConfigs.
type GlobalConfigNamespaceLister interface {
	// List lists all GlobalConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.GlobalConfig, err error)
	// Get retrieves the GlobalConfig from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.GlobalConfig, error)
	GlobalConfigNamespaceListerExpansion
}

// globalConfigNamespaceLister implements the GlobalConfigNamespaceLister
// interface.
type globalConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlobalConfigs in the indexer for a given namespace.
func (s globalConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.GlobalConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.GlobalConfig))
	})
	return ret, err
}

// Get retrieves the GlobalConfig from the indexer for a given namespace and name.
func (s globalConfigNamespaceLister) Get(name string) (*v1beta1.GlobalConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("globalconfig"), name)
	}
	return obj.(*v1beta1.GlobalConfig), nil
}
